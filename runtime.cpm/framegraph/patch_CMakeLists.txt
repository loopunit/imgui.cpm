cmake_minimum_required( VERSION 3.10 FATAL_ERROR )

message( STATUS "===========================================================================\n" )
message( STATUS "  OVERRIDE OVERRIDE OVERRIDE OVERRIDE OVERRIDE OVERRIDE OVERRIDE OVERRIDE\n" )
message( STATUS "===========================================================================\n" )
message( STATUS "project 'FrameGraph' generation started" )

project( "FrameGraph"
		 VERSION 2020.3.1
		 LANGUAGES C CXX )


add_library(GLSLang-lib STATIC IMPORTED)
set(GLSLang-lib_LIB_DIR ${CPM_RUNTIME_CACHE}/glslang/lib)
set_target_properties(GLSLang-lib PROPERTIES IMPORTED_LOCATION ${GLSLang-lib_LIB_DIR}/glslang.lib)
target_include_directories(GLSLang-lib INTERFACE ${CPM_RUNTIME_CACHE}/glslang/include ${CPM_RUNTIME_CACHE}/glslang/include/glslang)
target_compile_definitions(GLSLang-lib INTERFACE FG_ENABLE_GLSLANG ENABLE_HLSL)

add_library(VMA-lib INTERFACE)
target_include_directories(VMA-lib INTERFACE ${VulkanMemoryAllocator_SOURCE_DIR}/src)
target_compile_definitions(VMA-lib INTERFACE FG_ENABLE_VULKAN_MEMORY_ALLOCATOR=1)

set_property( GLOBAL PROPERTY USE_FOLDERS ON )
message( STATUS "Compiler: ${CMAKE_CXX_COMPILER_ID} (${CMAKE_CXX_COMPILER_VERSION})" )
message( STATUS "target system: ${CMAKE_SYSTEM_NAME} (${CMAKE_SYSTEM_VERSION})" )
message( STATUS "host system: ${CMAKE_HOST_SYSTEM_NAME} (${CMAKE_HOST_SYSTEM_VERSION})" )

set( FG_ENABLE_GLSL_TRACE OFF )
set( FG_ENABLE_OPENVR OFF )
set( FG_ENABLE_ASSIMP OFF )
set( FG_ENABLE_DEVIL OFF )
set( FG_ALLOW_GPL OFF )
set( FG_ENABLE_FFMPEG OFF )

set( FG_NO_EXCEPTIONS ON CACHE BOOL "disable C++ exceptions" )
#set( FG_ENABLE_STDALLOC OFF CACHE BOOL "custom std allocators (optional)" )
set( FG_ENABLE_GLSLANG ON CACHE BOOL "use glslang (optional, required for glsl compilation)" )
set( FG_ENABLE_VMA ON CACHE BOOL "use Vulkan Memory Allocator (required)" )
set( FG_ENABLE_OPENVR ${FG_ENABLE_OPENVR} CACHE BOOL "use OpenVR (optional)" )
set( FG_ENABLE_SIMPLE_COMPILER_OPTIONS OFF CACHE BOOL "use simplified compiler settings if you have problem with it" )
set( FG_EXTERNALS_USE_STABLE_VERSIONS OFF CACHE BOOL "use last stable version instead of master branch" )
set( FG_EXTERNALS_USE_PREBUILD OFF CACHE BOOL "use stable prebuild libraries" )
set( FG_ENABLE_GLSL_TRACE ${FG_ENABLE_GLSL_TRACE} CACHE BOOL "used for shader debugging and profiling" )
set( FG_VULKAN_VERSION "110" CACHE STRING "choose target Vulkan API version" )
set( FG_ENABLE_MEMLEAK_CHECKS ON CACHE BOOL "" )

# test & samples dependencies
set( FG_ENABLE_TESTS OFF CACHE BOOL "enable tests" )
set( FG_ENABLE_GLFW ON CACHE BOOL "use glfw (optional, required for tests)" )
set( FG_ENABLE_SDL2 OFF CACHE BOOL "use SDL2 (optional, required for tests)" )
set( FG_ENABLE_LODEPNG OFF CACHE BOOL "use lodepng (optional, may be used in tests)" )
set( FG_ENABLE_GRAPHVIZ OFF CACHE BOOL "use graphviz (optional)" )
set( FG_ENABLE_SPIRVREFLECT ON CACHE BOOL "for runtime spirv shader reflection (optional)" )

# UI dependencies
set( FG_ENABLE_IMGUI OFF CACHE BOOL "use imgui (optional, required for UI extension)" )

# Scene dependencies
set( FG_ENABLE_ASSIMP ${FG_ENABLE_ASSIMP} CACHE BOOL "use Assimp (optional, required for Scene extension)" )
set( FG_ENABLE_GLM OFF CACHE BOOL "use glm (optional, required for Scene extension)" )
set( FG_ENABLE_DEVIL ${FG_ENABLE_DEVIL} CACHE BOOL "use DevIL (optional, required for Scene extension)" )
set( FG_ENABLE_FFMPEG ${FG_ENABLE_FFMPEG} CACHE BOOL "use FFmpeg (optional, LGPL license)" )
set( FG_ALLOW_GPL ${FG_ALLOW_GPL} CACHE BOOL "allow GNU GPL code and libraries" )

set( MAIN_BINARY_DIR "${CMAKE_BINARY_DIR}/bin" CACHE INTERNAL "" FORCE )
set( CMAKE_DEBUG_POSTFIX "" )
set( CMAKE_RELEASE_POSTFIX "" )

#if (${FG_ENABLE_SIMPLE_COMPILER_OPTIONS})
#	include( "cmake/compilers_minimal.cmake" )
#else()
#	include( "cmake/compilers.cmake" )
#endif()
if (true)
	# detect target platform
	if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
		set( TARGET_PLATFORM "PLATFORM_LINUX" CACHE INTERNAL "" FORCE )

	elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Android")
		set( TARGET_PLATFORM "PLATFORM_ANDROID" CACHE INTERNAL "" FORCE )

	elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
		set( TARGET_PLATFORM "PLATFORM_MACOS" CACHE INTERNAL "" FORCE )

	elseif (${CMAKE_SYSTEM_NAME} STREQUAL "iOS")
		set( TARGET_PLATFORM "PLATFORM_IPHONE" CACHE INTERNAL "" FORCE )

	elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
		set( TARGET_PLATFORM "PLATFORM_WINDOWS" CACHE INTERNAL "" FORCE )

	elseif (${CMAKE_SYSTEM_NAME} STREQUAL "WindowsCE")
		set( TARGET_PLATFORM "PLATFORM_WINDOWSCE" CACHE INTERNAL "" FORCE )

	elseif (${CMAKE_SYSTEM_NAME} STREQUAL "WindowsStore")
		set( TARGET_PLATFORM "PLATFORM_WINDOWS_UWP" CACHE INTERNAL "" FORCE )

	elseif (${CMAKE_SYSTEM_NAME} STREQUAL "WindowsPhone")
		set( TARGET_PLATFORM "PLATFORM_WINDOWS_PHONE" CACHE INTERNAL "" FORCE )

	elseif (${CMAKE_SYSTEM_NAME} STREQUAL "QNX")
		set( TARGET_PLATFORM "PLATFORM_QNX" CACHE INTERNAL "" FORCE )
	else ()
		message( FATAL_ERROR "unsupported platform ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_VERSION}" )
	endif ()
	message( STATUS "TARGET_PLATFORM: ${TARGET_PLATFORM}" )

	# detect target platform bits
	if (${CMAKE_SIZEOF_VOID_P} EQUAL 8)
		set( PLATFORM_BITS 64 CACHE INTERNAL "" FORCE )
	elseif (${CMAKE_SIZEOF_VOID_P} EQUAL 4)
		set( PLATFORM_BITS 32 CACHE INTERNAL "" FORCE )
	else ()
		message( FATAL_ERROR "unsupported platform bits!" )
	endif ()

	if ( WIN32 )
		set( CMAKE_SYSTEM_VERSION "8.1" CACHE INTERNAL "" FORCE )
	endif()
	#==================================================================================================
	# Visual Studio Compilation settings
	#==================================================================================================
	set( COMPILER_MSVC OFF )
	string( FIND "${CMAKE_CXX_COMPILER_ID}" "MSVC" outPos )
	if ( (outPos GREATER -1) )
		set( COMPILER_MSVC ON )
	endif()
	if ( COMPILER_MSVC )
		set( DETECTED_COMPILER "COMPILER_MSVC" )
		#set( CURRENT_C_FLAGS ${CMAKE_C_FLAGS} )
		#set( CURRENT_CXX_FLAGS ${CMAKE_CXX_FLAGS} )
		#set( CURRENT_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} )
		#set( CURRENT_STATIC_LINKER_FLAGS ${CMAKE_STATIC_LINKER_FLAGS} )
		#set( CURRENT_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS} )
		#
		## disable c++ exceptions
		#if (${FG_NO_EXCEPTIONS})
		#	string( REPLACE "/EHa" " " CURRENT_CXX_FLAGS "${CURRENT_CXX_FLAGS}" )
		#	string( REPLACE "/EHsc" " " CURRENT_CXX_FLAGS "${CURRENT_CXX_FLAGS}" )
		#	string( REPLACE "/EHs" " " CURRENT_CXX_FLAGS "${CURRENT_CXX_FLAGS}" )
		#	string( REPLACE "/EHs-c-" " " CURRENT_CXX_FLAGS "${CURRENT_CXX_FLAGS}" )
		#	set( GLOBAL_CPP_EXCEPTIONS_FLAGS "/D_HAS_EXCEPTIONS=0" )
		#	set( LOCAL_CPP_EXCEPTIONS_FLAGS /EHs-c- )
		#else ()
		#	set( GLOBAL_CPP_EXCEPTIONS_FLAGS "/D_HAS_EXCEPTIONS=1" )
		#	set( LOCAL_CPP_EXCEPTIONS_FLAGS /EHsc )
		#endif ()
		#--------------------------------------------
	
		#set( CONFIGURATION_DEPENDENT_PATH ON CACHE INTERNAL "" FORCE )
				
		string( FIND "${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION}" "." outLength )
		if ( (outLength GREATER -1) )
			string( SUBSTRING "${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION}" 0 ${outLength} WINDOWS_TARGET_VERSION )
		endif() 
		#--------------------------------------------
		#message( STATUS "CMAKE_C_FLAGS: ${CURRENT_C_FLAGS}" )
		#message( STATUS "CMAKE_CXX_FLAGS: ${CURRENT_CXX_FLAGS}" )
		#message( STATUS "CMAKE_EXE_LINKER_FLAGS: ${CURRENT_EXE_LINKER_FLAGS}" )
		#message( STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CURRENT_STATIC_LINKER_FLAGS}" )
		#message( STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CURRENT_SHARED_LINKER_FLAGS}" )
		#set( CMAKE_CONFIGURATION_TYPES Release Profile Debug )
		#set( CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING "Configurations" FORCE )
	

		set( PROJECTS_SHARED_CXX_FLAGS_DEBUG /DCOMPILER_MSVC "/D${TARGET_PLATFORM}" "/DWINDOWS_TARGET_VERSION=${WINDOWS_TARGET_VERSION}" "/DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "/DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "/DPLATFORM_BITS=${PLATFORM_BITS}" CACHE INTERNAL "" FORCE )
		set( PROJECTS_SHARED_CXX_FLAGS_PROFILE /DCOMPILER_MSVC "/D${TARGET_PLATFORM}" "/DWINDOWS_TARGET_VERSION=${WINDOWS_TARGET_VERSION}" "/DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "/DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "/DPLATFORM_BITS=${PLATFORM_BITS}" CACHE INTERNAL "" FORCE )
		set( PROJECTS_SHARED_CXX_FLAGS_RELEASE /DCOMPILER_MSVC "/D${TARGET_PLATFORM}" "/DWINDOWS_TARGET_VERSION=${WINDOWS_TARGET_VERSION}" "/DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "/DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "/DPLATFORM_BITS=${PLATFORM_BITS}" CACHE INTERNAL "" FORCE )
		
		set( PROJECTS_SHARED_DEFINES_DEBUG CACHE INTERNAL "" FORCE )
		set( PROJECTS_SHARED_DEFINES_PROFILE CACHE INTERNAL "" FORCE )
		set( PROJECTS_SHARED_DEFINES_RELEASE CACHE INTERNAL "" FORCE )
		
		set( PROJECTS_SHARED_LINKER_FLAGS_DEBUG "" FORCE )
		set( PROJECTS_SHARED_LINKER_FLAGS_PROFILE "" FORCE )
		set( PROJECTS_SHARED_LINKER_FLAGS_RELEASE "" FORCE )

		# Release
		#set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Release>: > )
		#set( CMAKE_C_FLAGS_RELEASE "${CURRENT_C_FLAGS} /D_NDEBUG /DNDEBUG  /MD /Ox /MP " CACHE STRING "" FORCE )
		#set( CMAKE_CXX_FLAGS_RELEASE "${CURRENT_CXX_FLAGS} /D_NDEBUG /DNDEBUG /MD /Ox /MP ${GLOBAL_CPP_EXCEPTIONS_FLAGS}" CACHE STRING "" FORCE )
		#set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CURRENT_EXE_LINKER_FLAGS} /LTCG /RELEASE " CACHE STRING "" FORCE )
		#set( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CURRENT_STATIC_LINKER_FLAGS} /LTCG /RELEASE " CACHE STRING "" FORCE )
		#set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CURRENT_SHARED_LINKER_FLAGS} /LTCG /RELEASE " CACHE STRING "" FORCE )
		#set( PROJECTS_SHARED_CXX_FLAGS_RELEASE  /std:c++latest /MP /Gm- /Zc:inline /Gy- /fp:strict /fp:except- /DCOMPILER_MSVC "/D${TARGET_PLATFORM}" "/DWINDOWS_TARGET_VERSION=${WINDOWS_TARGET_VERSION}" "/DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "/DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "/DPLATFORM_BITS=${PLATFORM_BITS}" /we4002 /we4099 /we4129 /we4130 /we4172 /we4201 /we4238 /we4239 /we4240 /we4251 /we4263 /we4264 /we4266 /we4273 /we4293 /we4305 /we4390 /we4455 /we4456 /we4457 /we4458 /we4459 /we4473 /we4474 /we4522 /we4552 /we4553 /we4554 /we4700 /we4706 /we4715 /we4716 /we4717 /we4927  /w14018  /w14127 /w14189 /w14244 /w14245 /w14287 /w14389 /w14505 /w14668 /w14701 /w14702 /w14703 /w14838 /w14946 /w14996 /w15038  /wd4061 /wd4062 /wd4063 /wd4310 /wd4324 /wd4365 /wd4503 /wd4514 /wd4530 /wd4623 /wd4625 /wd4626 /wd4710 /wd4714 /wd5026 /wd5027  /Ob2 /Oi /Ot /Oy /GT /GL /GF /GS- /MD /W3 /Ox /analyze- ${LOCAL_CPP_EXCEPTIONS_FLAGS} CACHE INTERNAL "" FORCE )
		#set( PROJECTS_SHARED_DEFINES_RELEASE  CACHE INTERNAL "" FORCE )
		#set( PROJECTS_SHARED_LINKER_FLAGS_RELEASE " /OPT:REF /OPT:ICF /INCREMENTAL:NO /LTCG /RELEASE /DYNAMICBASE" CACHE INTERNAL "" FORCE )
		# Profile
		#set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Profile>: > )
		#set( CMAKE_C_FLAGS_PROFILE "${CURRENT_C_FLAGS} /D_NDEBUG /DNDEBUG  /MD /Od /MP " CACHE STRING "" FORCE )
		#set( CMAKE_CXX_FLAGS_PROFILE "${CURRENT_CXX_FLAGS} /D_NDEBUG /DNDEBUG  /MD /Od /Zi /MP ${GLOBAL_CPP_EXCEPTIONS_FLAGS}" CACHE STRING "" FORCE )
		#set( CMAKE_EXE_LINKER_FLAGS_PROFILE "${CURRENT_EXE_LINKER_FLAGS} /DEBUG /PROFILE " CACHE STRING "" FORCE )
		#set( CMAKE_STATIC_LINKER_FLAGS_PROFILE "${CURRENT_STATIC_LINKER_FLAGS} /DEBUG /PROFILE " CACHE STRING "" FORCE )
		#set( CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CURRENT_SHARED_LINKER_FLAGS} /DEBUG /PROFILE " CACHE STRING "" FORCE )
		#set( PROJECTS_SHARED_CXX_FLAGS_PROFILE  /std:c++latest /MP /Gm- /Zc:inline /Gy- /fp:strict /fp:except- /DCOMPILER_MSVC "/D${TARGET_PLATFORM}" "/DWINDOWS_TARGET_VERSION=${WINDOWS_TARGET_VERSION}" "/DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "/DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "/DPLATFORM_BITS=${PLATFORM_BITS}" /we4002 /we4099 /we4129 /we4130 /we4172 /we4201 /we4238 /we4239 /we4240 /we4251 /we4263 /we4264 /we4266 /we4273 /we4293 /we4305 /we4390 /we4455 /we4456 /we4457 /we4458 /we4459 /we4473 /we4474 /we4522 /we4552 /we4553 /we4554 /we4700 /we4706 /we4715 /we4716 /we4717 /we4927  /w14018 /w14100 /w14127 /w14189 /w14244 /w14245 /w14287 /w14389 /w14505 /w14668 /w14701 /w14702 /w14703 /w14838 /w14946 /w14996 /w15038  /wd4061 /wd4062 /wd4063 /wd4310 /wd4324 /wd4365 /wd4503 /wd4514 /wd4530 /wd4623 /wd4625 /wd4626 /wd4710 /wd4714 /wd5026 /wd5027  /Ob2 /Oi /Ot /Oy /GT /GL /GF /GS- /MD /W3 /Od /analyze- /Zi ${LOCAL_CPP_EXCEPTIONS_FLAGS} /GR CACHE INTERNAL "" FORCE )
		#set( PROJECTS_SHARED_DEFINES_PROFILE  CACHE INTERNAL "" FORCE )
		#set( PROJECTS_SHARED_LINKER_FLAGS_PROFILE " /OPT:REF /OPT:ICF /INCREMENTAL:NO /DEBUG /PROFILE" CACHE INTERNAL "" FORCE )
		# Debug
		#set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>: > )
		#set( CMAKE_C_FLAGS_DEBUG "${CURRENT_C_FLAGS} /D_DEBUG /D_ITERATOR_DEBUG_LEVEL=1 /MDd /Od /MP " CACHE STRING "" FORCE )
		#set( CMAKE_CXX_FLAGS_DEBUG "${CURRENT_CXX_FLAGS} /D_DEBUG /D_ITERATOR_DEBUG_LEVEL=1 /MDd /Od /Zi /MP ${GLOBAL_CPP_EXCEPTIONS_FLAGS}" CACHE STRING "" FORCE )
		#set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CURRENT_EXE_LINKER_FLAGS} /DEBUG:FULL " CACHE STRING "" FORCE )
		#set( CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CURRENT_STATIC_LINKER_FLAGS} /DEBUG:FULL " CACHE STRING "" FORCE )
		#set( CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CURRENT_SHARED_LINKER_FLAGS} /DEBUG:FULL " CACHE STRING "" FORCE )
		#set( PROJECTS_SHARED_CXX_FLAGS_DEBUG  /std:c++latest /MP /Gm- /Zc:inline /Gy- /fp:strict /fp:except- /DCOMPILER_MSVC "/D${TARGET_PLATFORM}" "/DWINDOWS_TARGET_VERSION=${WINDOWS_TARGET_VERSION}" "/DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "/DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "/DPLATFORM_BITS=${PLATFORM_BITS}" /we4002 /we4099 /we4129 /we4130 /we4172 /we4201 /we4238 /we4239 /we4240 /we4251 /we4263 /we4264 /we4266 /we4273 /we4293 /we4305 /we4390 /we4455 /we4456 /we4457 /we4458 /we4459 /we4473 /we4474 /we4522 /we4552 /we4553 /we4554 /we4700 /we4706 /we4715 /we4716 /we4717 /we4927  /w14018 /w14100 /w14127 /w14189 /w14244 /w14245 /w14287 /w14389 /w14505 /w14668 /w14701 /w14702 /w14703 /w14838 /w14946 /w14996 /w15038  /wd4061 /wd4062 /wd4063 /wd4310 /wd4324 /wd4365 /wd4503 /wd4514 /wd4530 /wd4623 /wd4625 /wd4626 /wd4710 /wd4714 /wd5026 /wd5027  /W4 /WX- /sdl /Od /Ob0 ${LOCAL_CPP_EXCEPTIONS_FLAGS} /Oy- /GF- /GS /GR /MDd /analyze- /Zi /RTCsu /JMC CACHE INTERNAL "" FORCE )
		#set( PROJECTS_SHARED_DEFINES_DEBUG  CACHE INTERNAL "" FORCE )
		#set( PROJECTS_SHARED_LINKER_FLAGS_DEBUG " /OPT:REF /OPT:ICF /INCREMENTAL:NO /DEBUG:FULL" CACHE INTERNAL "" FORCE )
		#set( CMAKE_BUILD_TYPE "Debug")
	endif()


	#==================================================================================================
	# GCC Compilation settings
	#==================================================================================================
	#set( COMPILER_GCC OFF )
	#string( FIND "${CMAKE_CXX_COMPILER_ID}" "GNU" outPos )
	#if ( (outPos GREATER -1) )
	#	set( COMPILER_GCC ON )
	#endif()
	#if ( COMPILER_GCC )
	#	set( DETECTED_COMPILER "COMPILER_GCC" )
	#	#--------------------------------------------
	#	set( CONFIGURATION_DEPENDENT_PATH OFF CACHE INTERNAL "" FORCE )
	#	#--------------------------------------------
	#	message( STATUS "CMAKE_C_FLAGS: ${CURRENT_C_FLAGS}" )
	#	message( STATUS "CMAKE_CXX_FLAGS: ${CURRENT_CXX_FLAGS}" )
	#	message( STATUS "CMAKE_EXE_LINKER_FLAGS: ${CURRENT_EXE_LINKER_FLAGS}" )
	#	message( STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CURRENT_STATIC_LINKER_FLAGS}" )
	#	message( STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CURRENT_SHARED_LINKER_FLAGS}" )
	#	set( CMAKE_CONFIGURATION_TYPES Release Profile Debug )
	#	set( CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING "Configurations" FORCE )
	#
	#	# Release
	#	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Release>: > )
	#	set( CMAKE_C_FLAGS_RELEASE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions -Wno-undef -Wno-switch  " CACHE STRING "" FORCE )
	#	set( CMAKE_CXX_FLAGS_RELEASE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions -Wno-undef -Wno-switch  " CACHE STRING "" FORCE )
	#	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( PROJECTS_SHARED_CXX_FLAGS_RELEASE  -DCOMPILER_GCC "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -Wchar-subscripts -Wdouble-promotion -Wformat -Wmain -Wmissing-braces -Wmissing-include-dirs -Wuninitialized -Wmaybe-uninitialized -Wunknown-pragmas -Wpragmas -Wstrict-aliasing -Wstrict-overflow -Wendif-labels -Wfree-nonheap-object -Wpointer-arith -Wcast-align -Wwrite-strings -Wconversion-null -Wenum-compare -Wsign-compare -Wsizeof-pointer-memaccess -Wlogical-op -Waddress -Wno-unused -Wno-non-template-friend -Wno-zero-as-null-pointer-constant -Wno-shadow -Wno-enum-compare -Wno-narrowing -Wno-attributes -Wno-invalid-offsetof  -Werror=init-self -Werror=parentheses -Werror=return-local-addr -Werror=return-type -Werror=array-bounds -Werror=div-by-zero -Werror=missing-field-initializers -Werror=placement-new -Werror=sign-compare -Werror=cast-qual -Werror=cast-align -Werror=literal-suffix -Werror=shadow=local -Werror=delete-incomplete -Werror=subobject-linkage -Werror=odr -Werror=multichar  -O3 -Ofast -fomit-frame-pointer -finline-functions CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_DEFINES_RELEASE  CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_LINKER_FLAGS_RELEASE " -static-libgcc -static-libstdc++" CACHE INTERNAL "" FORCE )
	#	# Profile
	#	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Profile>: > )
	#	set( CMAKE_C_FLAGS_PROFILE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O2 -Wno-undef -Wno-switch  " CACHE STRING "" FORCE )
	#	set( CMAKE_CXX_FLAGS_PROFILE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O2 -Wno-undef -Wno-switch  " CACHE STRING "" FORCE )
	#	set( CMAKE_EXE_LINKER_FLAGS_PROFILE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_STATIC_LINKER_FLAGS_PROFILE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( PROJECTS_SHARED_CXX_FLAGS_PROFILE  -DCOMPILER_GCC "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -Wchar-subscripts -Wdouble-promotion -Wformat -Wmain -Wmissing-braces -Wmissing-include-dirs -Wuninitialized -Wmaybe-uninitialized -Wunknown-pragmas -Wpragmas -Wstrict-aliasing -Wstrict-overflow -Wendif-labels -Wfree-nonheap-object -Wpointer-arith -Wcast-align -Wwrite-strings -Wconversion-null -Wenum-compare -Wsign-compare -Wsizeof-pointer-memaccess -Wlogical-op -Waddress -Wno-unused -Wno-non-template-friend -Wno-zero-as-null-pointer-constant -Wno-shadow -Wno-enum-compare -Wno-narrowing -Wno-attributes -Wno-invalid-offsetof  -Werror=init-self -Werror=parentheses -Werror=return-local-addr -Werror=return-type -Werror=array-bounds -Werror=div-by-zero -Werror=missing-field-initializers -Werror=placement-new -Werror=sign-compare -Werror=cast-qual -Werror=cast-align -Werror=literal-suffix -Werror=shadow=local -Werror=delete-incomplete -Werror=subobject-linkage -Werror=odr -Werror=multichar  -O2 CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_DEFINES_PROFILE  CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_LINKER_FLAGS_PROFILE " -static-libgcc -static-libstdc++" CACHE INTERNAL "" FORCE )
	#	# Debug
	#	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>: > )
	#	set( CMAKE_C_FLAGS_DEBUG "${CURRENT_C_FLAGS} -D_DEBUG -Og -Wno-undef -Wno-switch  " CACHE STRING "" FORCE )
	#	set( CMAKE_CXX_FLAGS_DEBUG "${CURRENT_CXX_FLAGS} -D_DEBUG -Og -Wno-undef -Wno-switch  " CACHE STRING "" FORCE )
	#	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( PROJECTS_SHARED_CXX_FLAGS_DEBUG  -DCOMPILER_GCC "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -Wchar-subscripts -Wdouble-promotion -Wformat -Wmain -Wmissing-braces -Wmissing-include-dirs -Wuninitialized -Wmaybe-uninitialized -Wunknown-pragmas -Wpragmas -Wstrict-aliasing -Wstrict-overflow -Wendif-labels -Wfree-nonheap-object -Wpointer-arith -Wcast-align -Wwrite-strings -Wconversion-null -Wenum-compare -Wsign-compare -Wsizeof-pointer-memaccess -Wlogical-op -Waddress -Wno-unused -Wno-non-template-friend -Wno-zero-as-null-pointer-constant -Wno-shadow -Wno-enum-compare -Wno-narrowing -Wno-attributes -Wno-invalid-offsetof  -Werror=init-self -Werror=parentheses -Werror=return-local-addr -Werror=return-type -Werror=array-bounds -Werror=div-by-zero -Werror=missing-field-initializers -Werror=placement-new -Werror=sign-compare -Werror=cast-qual -Werror=cast-align -Werror=literal-suffix -Werror=shadow=local -Werror=delete-incomplete -Werror=subobject-linkage -Werror=odr -Werror=multichar  -ggdb -Og -Wno-terminate  CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_DEFINES_DEBUG  CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_LINKER_FLAGS_DEBUG " -static-libgcc -static-libstdc++" CACHE INTERNAL "" FORCE )
	#	set( CMAKE_BUILD_TYPE "Debug")
	#endif()


	#==================================================================================================
	# Clang Compilation settings
	#==================================================================================================
	#set( COMPILER_CLANG OFF )
	#string( FIND "${CMAKE_CXX_COMPILER_ID}" "Clang" outPos )
	#if ( (outPos GREATER -1) AND (WIN32 OR UNIX) )
	#	set( COMPILER_CLANG ON )
	#endif()
	#if ( COMPILER_CLANG )
	#	set( DETECTED_COMPILER "COMPILER_CLANG" )
	#	#--------------------------------------------
	#	set( CONFIGURATION_DEPENDENT_PATH OFF CACHE INTERNAL "" FORCE )
	#	#--------------------------------------------
	#	message( STATUS "CMAKE_C_FLAGS: ${CURRENT_C_FLAGS}" )
	#	message( STATUS "CMAKE_CXX_FLAGS: ${CURRENT_CXX_FLAGS}" )
	#	message( STATUS "CMAKE_EXE_LINKER_FLAGS: ${CURRENT_EXE_LINKER_FLAGS}" )
	#	message( STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CURRENT_STATIC_LINKER_FLAGS}" )
	#	message( STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CURRENT_SHARED_LINKER_FLAGS}" )
	#	set( CMAKE_CONFIGURATION_TYPES Release Profile Debug )
	#	set( CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING "Configurations" FORCE )
	#
	#	# Release
	#	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Release>: > )
	#	set( CMAKE_C_FLAGS_RELEASE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -Wno-undef -Wno-switch  " CACHE STRING "" FORCE )
	#	set( CMAKE_CXX_FLAGS_RELEASE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -Wno-undef -Wno-switch  " CACHE STRING "" FORCE )
	#	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( PROJECTS_SHARED_CXX_FLAGS_RELEASE  -DCOMPILER_CLANG "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -Wno-exceptions -Wchar-subscripts -Wdouble-promotion -Wformat -Wmain -Wmissing-braces -Wmissing-include-dirs -Wunused -Wuninitialized -Wconditional-uninitialized -Wunknown-pragmas -Wpragmas -Wstrict-aliasing -Wstrict-overflow -Wundef -Wendif-labels -Wpointer-arith -Wwrite-strings -Wconversion-null -Wno-zero-as-null-pointer-constant -Wenum-compare -Wsign-compare -Wsizeof-pointer-memaccess -Wlogical-op-parentheses -frtti -fexceptions -Wloop-analysis -Wincrement-bool -Werror=init-self -Werror=parentheses -Werror=return-stack-address -Werror=return-type -Werror=unsupported-friend -Werror=array-bounds -Werror=div-by-zero -Werror=address -Werror=missing-field-initializers -Werror=cast-qual -Werror=cast-align -Werror=unknown-warning-option -Werror=user-defined-literals -Werror=keyword-macro -Werror=large-by-value-copy -Werror=instantiation-after-specialization -Werror=method-signatures -Werror=self-assign -Werror=self-move -Werror=infinite-recursion -Werror=pessimizing-move -Werror=dangling-else -Wno-comment -Wno-undefined-inline -Wno-c++11-narrowing -Wno-c++14-extensions -Wno-c++1z-extensions  -O3 -Ofast -fomit-frame-pointer -finline-functions CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_DEFINES_RELEASE  CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_LINKER_FLAGS_RELEASE "" CACHE INTERNAL "" FORCE )
	#	# Profile
	#	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Profile>: > )
	#	set( CMAKE_C_FLAGS_PROFILE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O2 -Wno-undef -Wno-switch  " CACHE STRING "" FORCE )
	#	set( CMAKE_CXX_FLAGS_PROFILE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O2 -Wno-undef -Wno-switch  " CACHE STRING "" FORCE )
	#	set( CMAKE_EXE_LINKER_FLAGS_PROFILE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_STATIC_LINKER_FLAGS_PROFILE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( PROJECTS_SHARED_CXX_FLAGS_PROFILE  -DCOMPILER_CLANG "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -Wno-exceptions -Wchar-subscripts -Wdouble-promotion -Wformat -Wmain -Wmissing-braces -Wmissing-include-dirs -Wunused -Wuninitialized -Wconditional-uninitialized -Wunknown-pragmas -Wpragmas -Wstrict-aliasing -Wstrict-overflow -Wundef -Wendif-labels -Wpointer-arith -Wwrite-strings -Wconversion-null -Wno-zero-as-null-pointer-constant -Wenum-compare -Wsign-compare -Wsizeof-pointer-memaccess -Wlogical-op-parentheses -frtti -fexceptions -Wloop-analysis -Wincrement-bool -Werror=init-self -Werror=parentheses -Werror=return-stack-address -Werror=return-type -Werror=unsupported-friend -Werror=array-bounds -Werror=div-by-zero -Werror=address -Werror=missing-field-initializers -Werror=cast-qual -Werror=cast-align -Werror=unknown-warning-option -Werror=user-defined-literals -Werror=keyword-macro -Werror=large-by-value-copy -Werror=instantiation-after-specialization -Werror=method-signatures -Werror=self-assign -Werror=self-move -Werror=infinite-recursion -Werror=pessimizing-move -Werror=dangling-else -Wno-comment -Wno-undefined-inline -Wno-c++11-narrowing -Wno-c++14-extensions -Wno-c++1z-extensions  -O2 -finline-functions CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_DEFINES_PROFILE  CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_LINKER_FLAGS_PROFILE "" CACHE INTERNAL "" FORCE )
	#	# Debug
	#	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>: > )
	#	set( CMAKE_C_FLAGS_DEBUG "${CURRENT_C_FLAGS} -D_DEBUG -Og -Wno-undef -Wno-switch  " CACHE STRING "" FORCE )
	#	set( CMAKE_CXX_FLAGS_DEBUG "${CURRENT_CXX_FLAGS} -D_DEBUG -Og -Wno-undef -Wno-switch  " CACHE STRING "" FORCE )
	#	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( PROJECTS_SHARED_CXX_FLAGS_DEBUG  -std=c++17 -DCOMPILER_CLANG "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -Wno-exceptions -Wchar-subscripts -Wdouble-promotion -Wformat -Wmain -Wmissing-braces -Wmissing-include-dirs -Wunused -Wuninitialized -Wconditional-uninitialized -Wunknown-pragmas -Wpragmas -Wstrict-aliasing -Wstrict-overflow -Wundef -Wendif-labels -Wpointer-arith -Wwrite-strings -Wconversion-null -Wno-zero-as-null-pointer-constant -Wenum-compare -Wsign-compare -Wsizeof-pointer-memaccess -Wlogical-op-parentheses -frtti -fexceptions -Wloop-analysis -Wincrement-bool -Werror=init-self -Werror=parentheses -Werror=return-stack-address -Werror=return-type -Werror=unsupported-friend -Werror=array-bounds -Werror=div-by-zero -Werror=address -Werror=missing-field-initializers -Werror=cast-qual -Werror=cast-align -Werror=unknown-warning-option -Werror=user-defined-literals -Werror=keyword-macro -Werror=large-by-value-copy -Werror=instantiation-after-specialization -Werror=method-signatures -Werror=self-assign -Werror=self-move -Werror=infinite-recursion -Werror=pessimizing-move -Werror=dangling-else -Wno-comment -Wno-undefined-inline -Wno-c++11-narrowing -Wno-c++14-extensions -Wno-c++1z-extensions  -ggdb -Og CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_DEFINES_DEBUG  CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_LINKER_FLAGS_DEBUG "" CACHE INTERNAL "" FORCE )
	#	set( CMAKE_BUILD_TYPE "Debug")
	#endif()


	#==================================================================================================
	# Clang Compilation settings
	#==================================================================================================
	#set( COMPILER_CLANG_APPLE OFF )
	#string( FIND "${CMAKE_CXX_COMPILER_ID}" "Clang" outPos )
	#if ( (outPos GREATER -1) AND (APPLE) )
	#	set( COMPILER_CLANG_APPLE ON )
	#endif()
	#if ( COMPILER_CLANG_APPLE )
	#	set( DETECTED_COMPILER "COMPILER_CLANG_APPLE" )
	#	#--------------------------------------------
	#	set( CONFIGURATION_DEPENDENT_PATH ON CACHE INTERNAL "" FORCE )
	#	#--------------------------------------------
	#	message( STATUS "CMAKE_C_FLAGS: ${CURRENT_C_FLAGS}" )
	#	message( STATUS "CMAKE_CXX_FLAGS: ${CURRENT_CXX_FLAGS}" )
	#	message( STATUS "CMAKE_EXE_LINKER_FLAGS: ${CURRENT_EXE_LINKER_FLAGS}" )
	#	message( STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CURRENT_STATIC_LINKER_FLAGS}" )
	#	message( STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CURRENT_SHARED_LINKER_FLAGS}" )
	#	set( CMAKE_CONFIGURATION_TYPES Release Profile Debug )
	#	set( CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING "Configurations" FORCE )
	#
	#	# Release
	#	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Release>: > )
	#	set( CMAKE_C_FLAGS_RELEASE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	#	set( CMAKE_CXX_FLAGS_RELEASE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	#	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( PROJECTS_SHARED_CXX_FLAGS_RELEASE  -DCOMPILER_CLANG "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -Wchar-subscripts -Wdouble-promotion -Wformat -Wmain -Wmissing-braces -Wmissing-include-dirs -Wuninitialized -Wunknown-pragmas -Wpragmas -Wstrict-aliasing -Wstrict-overflow -Wundef -Wendif-labels -Wpointer-arith -Wwrite-strings -Wconversion-null -Wenum-compare -Wsign-compare -Wsizeof-pointer-memaccess -frtti -fexceptions -Wloop-analysis -Wincrement-bool -Werror=init-self -Werror=parentheses -Werror=return-stack-address -Werror=return-type -Werror=user-defined-literals -Werror=array-bounds -Werror=div-by-zero -Werror=address -Werror=missing-field-initializers -Werror=instantiation-after-specialization -Werror=cast-qual -Werror=unknown-warning-option -Werror=keyword-macro -Werror=large-by-value-copy -Werror=method-signatures -Werror=self-assign -Werror=self-move -Werror=infinite-recursion -Werror=pessimizing-move -Werror=dangling-else  -Wno-comment -Wno-undefined-inline -Wno-c++14-extensions -Wno-c++1z-extensions  -O3 -Ofast -fomit-frame-pointer -finline-functions CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_DEFINES_RELEASE  CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_LINKER_FLAGS_RELEASE "" CACHE INTERNAL "" FORCE )
	#	# Profile
	#	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Profile>: > )
	#	set( CMAKE_C_FLAGS_PROFILE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O2 -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	#	set( CMAKE_CXX_FLAGS_PROFILE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O2 -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	#	set( CMAKE_EXE_LINKER_FLAGS_PROFILE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_STATIC_LINKER_FLAGS_PROFILE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( PROJECTS_SHARED_CXX_FLAGS_PROFILE  -DCOMPILER_CLANG "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -Wchar-subscripts -Wdouble-promotion -Wformat -Wmain -Wmissing-braces -Wmissing-include-dirs -Wuninitialized -Wunknown-pragmas -Wpragmas -Wstrict-aliasing -Wstrict-overflow -Wundef -Wendif-labels -Wpointer-arith -Wwrite-strings -Wconversion-null -Wenum-compare -Wsign-compare -Wsizeof-pointer-memaccess -frtti -fexceptions -Wloop-analysis -Wincrement-bool -Werror=init-self -Werror=parentheses -Werror=return-stack-address -Werror=return-type -Werror=user-defined-literals -Werror=array-bounds -Werror=div-by-zero -Werror=address -Werror=missing-field-initializers -Werror=instantiation-after-specialization -Werror=cast-qual -Werror=unknown-warning-option -Werror=keyword-macro -Werror=large-by-value-copy -Werror=method-signatures -Werror=self-assign -Werror=self-move -Werror=infinite-recursion -Werror=pessimizing-move -Werror=dangling-else  -Wno-comment -Wno-undefined-inline -Wno-c++14-extensions -Wno-c++1z-extensions  -O2 -finline-functions CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_DEFINES_PROFILE  CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_LINKER_FLAGS_PROFILE "" CACHE INTERNAL "" FORCE )
	#	# Debug
	#	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>: > )
	#	set( CMAKE_C_FLAGS_DEBUG "${CURRENT_C_FLAGS} -D_DEBUG -Og -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	#	set( CMAKE_CXX_FLAGS_DEBUG "${CURRENT_CXX_FLAGS} -D_DEBUG -Og -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	#	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( PROJECTS_SHARED_CXX_FLAGS_DEBUG  -DCOMPILER_CLANG "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -Wchar-subscripts -Wdouble-promotion -Wformat -Wmain -Wmissing-braces -Wmissing-include-dirs -Wuninitialized -Wunknown-pragmas -Wpragmas -Wstrict-aliasing -Wstrict-overflow -Wundef -Wendif-labels -Wpointer-arith -Wwrite-strings -Wconversion-null -Wenum-compare -Wsign-compare -Wsizeof-pointer-memaccess -frtti -fexceptions -Wloop-analysis -Wincrement-bool -Werror=init-self -Werror=parentheses -Werror=return-stack-address -Werror=return-type -Werror=user-defined-literals -Werror=array-bounds -Werror=div-by-zero -Werror=address -Werror=missing-field-initializers -Werror=instantiation-after-specialization -Werror=cast-qual -Werror=unknown-warning-option -Werror=keyword-macro -Werror=large-by-value-copy -Werror=method-signatures -Werror=self-assign -Werror=self-move -Werror=infinite-recursion -Werror=pessimizing-move -Werror=dangling-else  -Wno-comment -Wno-undefined-inline -Wno-c++14-extensions -Wno-c++1z-extensions  -ggdb -Og CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_DEFINES_DEBUG  CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_LINKER_FLAGS_DEBUG "" CACHE INTERNAL "" FORCE )
	#	set( CMAKE_BUILD_TYPE "Debug")
	#endif()


	#==================================================================================================
	# Clang Compilation settings
	#==================================================================================================
	#set( COMPILER_CLANG_ANDROID OFF )
	#string( FIND "${CMAKE_CXX_COMPILER_ID}" "Clang" outPos )
	#if ( (outPos GREATER -1) AND (DEFINED ANDROID) )
	#	set( COMPILER_CLANG_ANDROID ON )
	#endif()
	#if ( COMPILER_CLANG_ANDROID )
	#	set( DETECTED_COMPILER "COMPILER_CLANG_ANDROID" )
	#	#--------------------------------------------
	#	set( CONFIGURATION_DEPENDENT_PATH OFF CACHE INTERNAL "" FORCE )
	#	#--------------------------------------------
	#	message( STATUS "CMAKE_C_FLAGS: ${CURRENT_C_FLAGS}" )
	#	message( STATUS "CMAKE_CXX_FLAGS: ${CURRENT_CXX_FLAGS}" )
	#	message( STATUS "CMAKE_EXE_LINKER_FLAGS: ${CURRENT_EXE_LINKER_FLAGS}" )
	#	message( STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CURRENT_STATIC_LINKER_FLAGS}" )
	#	message( STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CURRENT_SHARED_LINKER_FLAGS}" )
	#	set( CMAKE_CONFIGURATION_TYPES Release Profile Debug )
	#	set( CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING "Configurations" FORCE )
	#
	#	# Release
	#	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Release>: > )
	#	set( CMAKE_C_FLAGS_RELEASE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	#	set( CMAKE_CXX_FLAGS_RELEASE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	#	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( PROJECTS_SHARED_CXX_FLAGS_RELEASE  -DCOMPILER_CLANG "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -Wchar-subscripts -Wdouble-promotion -Wformat -Wmain -Wmissing-braces -Wmissing-include-dirs -Wuninitialized -Wunknown-pragmas -Wpragmas -Wstrict-aliasing -Wstrict-overflow -Wundef -Wendif-labels -Wpointer-arith -Wwrite-strings -Wconversion-null -Wenum-compare -Wsign-compare -Wsizeof-pointer-memaccess -frtti -fexceptions -Wloop-analysis -Wincrement-bool -Werror=init-self -Werror=parentheses -Werror=return-stack-address -Werror=return-type -Werror=user-defined-literals -Werror=array-bounds -Werror=div-by-zero -Werror=address -Werror=missing-field-initializers -Werror=instantiation-after-specialization -Werror=cast-qual -Werror=unknown-warning-option -Werror=keyword-macro -Werror=large-by-value-copy -Werror=dangling-else -Werror=method-signatures -Werror=self-assign -Werror=self-move -Werror=infinite-recursion -Werror=pessimizing-move  -Wno-comment -Wno-undefined-inline -Wno-c++14-extensions -Wno-c++1z-extensions  -O3 -Ofast -fomit-frame-pointer -finline-functions CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_DEFINES_RELEASE  CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_LINKER_FLAGS_RELEASE " -static" CACHE INTERNAL "" FORCE )
	#	# Profile
	#	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Profile>: > )
	#	set( CMAKE_C_FLAGS_PROFILE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O2 -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	#	set( CMAKE_CXX_FLAGS_PROFILE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O2 -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	#	set( CMAKE_EXE_LINKER_FLAGS_PROFILE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_STATIC_LINKER_FLAGS_PROFILE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( PROJECTS_SHARED_CXX_FLAGS_PROFILE  -DCOMPILER_CLANG "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -Wchar-subscripts -Wdouble-promotion -Wformat -Wmain -Wmissing-braces -Wmissing-include-dirs -Wuninitialized -Wunknown-pragmas -Wpragmas -Wstrict-aliasing -Wstrict-overflow -Wundef -Wendif-labels -Wpointer-arith -Wwrite-strings -Wconversion-null -Wenum-compare -Wsign-compare -Wsizeof-pointer-memaccess -frtti -fexceptions -Wloop-analysis -Wincrement-bool -Werror=init-self -Werror=parentheses -Werror=return-stack-address -Werror=return-type -Werror=user-defined-literals -Werror=array-bounds -Werror=div-by-zero -Werror=address -Werror=missing-field-initializers -Werror=instantiation-after-specialization -Werror=cast-qual -Werror=unknown-warning-option -Werror=keyword-macro -Werror=large-by-value-copy -Werror=dangling-else -Werror=method-signatures -Werror=self-assign -Werror=self-move -Werror=infinite-recursion -Werror=pessimizing-move  -Wno-comment -Wno-undefined-inline -Wno-c++14-extensions -Wno-c++1z-extensions  -O2 -finline-functions CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_DEFINES_PROFILE  CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_LINKER_FLAGS_PROFILE " -static" CACHE INTERNAL "" FORCE )
	#	# Debug
	#	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>: > )
	#	set( CMAKE_C_FLAGS_DEBUG "${CURRENT_C_FLAGS} -D_DEBUG -Og -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	#	set( CMAKE_CXX_FLAGS_DEBUG "${CURRENT_CXX_FLAGS} -D_DEBUG -Og -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	#	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	#	set( PROJECTS_SHARED_CXX_FLAGS_DEBUG  -DCOMPILER_CLANG "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -Wchar-subscripts -Wdouble-promotion -Wformat -Wmain -Wmissing-braces -Wmissing-include-dirs -Wuninitialized -Wunknown-pragmas -Wpragmas -Wstrict-aliasing -Wstrict-overflow -Wundef -Wendif-labels -Wpointer-arith -Wwrite-strings -Wconversion-null -Wenum-compare -Wsign-compare -Wsizeof-pointer-memaccess -frtti -fexceptions -Wloop-analysis -Wincrement-bool -Werror=init-self -Werror=parentheses -Werror=return-stack-address -Werror=return-type -Werror=user-defined-literals -Werror=array-bounds -Werror=div-by-zero -Werror=address -Werror=missing-field-initializers -Werror=instantiation-after-specialization -Werror=cast-qual -Werror=unknown-warning-option -Werror=keyword-macro -Werror=large-by-value-copy -Werror=dangling-else -Werror=method-signatures -Werror=self-assign -Werror=self-move -Werror=infinite-recursion -Werror=pessimizing-move  -Wno-comment -Wno-undefined-inline -Wno-c++14-extensions -Wno-c++1z-extensions  -ggdb -Og CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_DEFINES_DEBUG  CACHE INTERNAL "" FORCE )
	#	set( PROJECTS_SHARED_LINKER_FLAGS_DEBUG " -static" CACHE INTERNAL "" FORCE )
	#	set( CMAKE_BUILD_TYPE "Debug")
	#endif()
	#
	#
	#if ( NOT DEFINED DETECTED_COMPILER )
	#	message( FATAL_ERROR "current compiler: '${CMAKE_CXX_COMPILER_ID}' is not configured for this project!" )
	#endif()

endif()

#include( "cmake/compiler_tests.cmake" )
if (true)
	include( CheckCXXSourceCompiles )

	#if (${COMPILER_MSVC})
	#	set( FG_DEFAULT_CPPFLAGS "/std:c++latest" )
	#else()
	#	set( FG_DEFAULT_CPPFLAGS "-std=c++17" )
	#endif ()
	#
	#set( CMAKE_REQUIRED_FLAGS "${FG_DEFAULT_CPPFLAGS}" )
	#message( STATUS "Run compiler tests with flags: ${CMAKE_REQUIRED_FLAGS}" )

	set( FG_COMPILER_DEFINITIONS "" )
	set( FG_LINK_LIBRARIES "" )

	#------------------------------------------------------------------------------
	#check_cxx_source_compiles(
	#	"#include <string_view>
	#	int main () {
	#		std::string_view str{\"1234\"};
	#		return 0;
	#	}"
	#	STD_STRINGVIEW_SUPPORTED )
	#
	#if (STD_STRINGVIEW_SUPPORTED)
		set( FG_COMPILER_DEFINITIONS "${FG_COMPILER_DEFINITIONS}" "FG_STD_STRINGVIEW" )
		set( STD_STRINGVIEW_SUPPORTED ON CACHE INTERNAL "" FORCE )
	#else()
	#	set( STD_STRINGVIEW_SUPPORTED OFF CACHE INTERNAL "" FORCE )
	#endif ()

	#------------------------------------------------------------------------------
	#check_cxx_source_compiles(
	#	"#include <optional>
	#	int main () {
	#		std::optional<int> opt;
	#		return opt.has_value() ? 0 : 1;
	#	}"
	#	STD_OPTIONAL_SUPPORTED )
	#
	#if (STD_OPTIONAL_SUPPORTED)
		set( FG_COMPILER_DEFINITIONS "${FG_COMPILER_DEFINITIONS}" "FG_STD_OPTIONAL" )
		set( STD_OPTIONAL_SUPPORTED ON CACHE INTERNAL "" FORCE )
	#else()
	#	set( STD_OPTIONAL_SUPPORTED OFF CACHE INTERNAL "" FORCE )
	#endif ()

	#------------------------------------------------------------------------------
	#check_cxx_source_compiles(
	#	"#include <variant>
	#	int main () {
	#		std::variant<int, float> var;
	#		var = 1.0f;
	#		return 0;
	#	}"
	#	STD_VARIANT_SUPPORTED )
	#
	#if (STD_VARIANT_SUPPORTED)
		set( FG_COMPILER_DEFINITIONS "${FG_COMPILER_DEFINITIONS}" "FG_STD_VARIANT" )
		set( STD_VARIANT_SUPPORTED ON CACHE INTERNAL "" FORCE )
	#else()
	#	set( STD_VARIANT_SUPPORTED OFF CACHE INTERNAL "" FORCE )
	#endif ()

	#------------------------------------------------------------------------------
	#if (${COMPILER_CLANG_ANDROID})
	#	set( CMAKE_REQUIRED_LIBRARIES "libc++fs" )
	#elseif (${COMPILER_CLANG} OR ${COMPILER_CLANG_APPLE} OR ${COMPILER_GCC})
	#	set( CMAKE_REQUIRED_LIBRARIES "stdc++fs" )
	#endif()
	#
	#check_cxx_source_compiles(
	#	"#include <filesystem>
	#	int main () {
	#		(void)(std::filesystem::current_path());
	#		return 0;
	#	}"
	#	STD_FILESYSTEM_SUPPORTED )
	#
	#if (STD_FILESYSTEM_SUPPORTED)
	#	set( FG_COMPILER_DEFINITIONS "${FG_COMPILER_DEFINITIONS}" "FG_STD_FILESYSTEM" )
	#
	#	if (${COMPILER_CLANG_ANDROID})
	#		set( FG_LINK_LIBRARIES "${FG_LINK_LIBRARIES}" "libc++fs" )
	#	elseif (${COMPILER_CLANG} OR ${COMPILER_CLANG_APPLE} OR ${COMPILER_GCC})
	#		set( FG_LINK_LIBRARIES "${FG_LINK_LIBRARIES}" "stdc++fs" )
	#	endif()
	#	set( STD_FILESYSTEM_SUPPORTED ON CACHE INTERNAL "" FORCE )
	#else()
		set( STD_FILESYSTEM_SUPPORTED OFF CACHE INTERNAL "" FORCE )
	#endif ()
	set( CMAKE_REQUIRED_LIBRARIES "" )

	#------------------------------------------------------------------------------
	#check_cxx_source_compiles(
	#	"#include <new>
	#	static constexpr size_t Align = std::hardware_destructive_interference_size;
	#	int main () {
	#		return 0;
	#	}"
	#	STD_CACHELINESIZE_SUPPORTED )
	#
	#if (STD_CACHELINESIZE_SUPPORTED)
		set( FG_COMPILER_DEFINITIONS "${FG_COMPILER_DEFINITIONS}" "FG_CACHE_LINE=std::hardware_destructive_interference_size" )
	#else ()
	#	set( FG_COMPILER_DEFINITIONS "${FG_COMPILER_DEFINITIONS}" "FG_CACHE_LINE=64" ) # TODO
	#endif ()

	#------------------------------------------------------------------------------
	#check_cxx_source_compiles(
	#	"#include <barrier>
	#	int main () {
	#		std::barrier  temp;
	#		return 0;
	#	}"
	#	STD_BARRIER_SUPPORTED )
	#
	#if (STD_BARRIER_SUPPORTED)
	#	set( FG_COMPILER_DEFINITIONS "${FG_COMPILER_DEFINITIONS}" "FG_STD_BARRIER" )
	#endif ()

	#------------------------------------------------------------------------------
	#if (NOT ${COMPILER_MSVC})
	#	set( CMAKE_REQUIRED_FLAGS "${FG_DEFAULT_CPPFLAGS} -Werror=unknown-pragmas" )
	#endif ()
	#
	#check_cxx_source_compiles(
	#	"#pragma detect_mismatch( \"FG_DEBUG\", \"1\" )
	#	int main () {
	#		return 0;
	#	}"
	#	CPP_DETECT_MISMATCH_SUPPORTED )
	#
	#if (CPP_DETECT_MISMATCH_SUPPORTED)
	#	set( FG_COMPILER_DEFINITIONS "${FG_COMPILER_DEFINITIONS}" "FG_CPP_DETECT_MISMATCH" )
	#endif ()
	#set( CMAKE_REQUIRED_FLAGS "${FG_DEFAULT_CPPFLAGS}" )

	#------------------------------------------------------------------------------
	#check_cxx_source_compiles(
	#	"#include <functional>
	#	int main () {
	#		char buffer[128] = {};
	#		(void)(std::_Hash_array_representation( reinterpret_cast<const unsigned char*>(buffer), std::size(buffer) ));
	#		return 0;
	#	}"
	#	HAS_HASHFN_HashArrayRepresentation )
	#
	#if (HAS_HASHFN_HashArrayRepresentation)
		set( FG_COMPILER_DEFINITIONS "${FG_COMPILER_DEFINITIONS}" "FG_HAS_HASHFN_HashArrayRepresentation" )
	##endif ()

	#------------------------------------------------------------------------------
	#check_cxx_source_compiles(
	#	"#include <functional>
	#	int main () {
	#		char buffer[128] = {};
	#		(void)(std::__murmur2_or_cityhash<size_t>()( buffer, std::size(buffer) ));
	#		return 0;
	#	}"
	#	HAS_HASHFN_Murmur2OrCityhash )
	#
	#if (HAS_HASHFN_Murmur2OrCityhash)
		set( FG_COMPILER_DEFINITIONS "${FG_COMPILER_DEFINITIONS}" "FG_HAS_HASHFN_Murmur2OrCityhash" )
	#endif ()

	#------------------------------------------------------------------------------
	#check_cxx_source_compiles(
	#	"#include <functional>
	#	int main () {
	#		char buffer[128] = {};
	#		(void)(std::_Hash_bytes( buffer, std::size(buffer), 0 ));
	#		return 0;
	#	}"
	#	HAS_HASHFN_HashBytes )
	#
	#if (HAS_HASHFN_HashBytes)
		set( FG_COMPILER_DEFINITIONS "${FG_COMPILER_DEFINITIONS}" "FG_HAS_HASHFN_HashBytes" )
	#endif ()

	#------------------------------------------------------------------------------

	#set( CMAKE_REQUIRED_FLAGS "" )
	set( FG_COMPILER_DEFINITIONS "${FG_COMPILER_DEFINITIONS}" CACHE INTERNAL "" FORCE )
	set( FG_LINK_LIBRARIES "${FG_LINK_LIBRARIES}" CACHE INTERNAL "" FORCE )

	#message( STATUS "Supported features = ${CMAKE_CXX_COMPILE_FEATURES}" )
endif()

include( "cmake/version.cmake" )

#add_subdirectory( "external" )

include( "cmake/project_template.cmake" )
add_subdirectory( "stl" )
add_subdirectory( "extensions/vulkan_loader" )
add_subdirectory( "framegraph" )
add_subdirectory( "extensions/framework" )
add_subdirectory( "extensions/pipeline_compiler" )
add_subdirectory( "extensions/pipeline_reflection" )

message( STATUS "project 'FrameGraph' generation ended" )
message( STATUS "\n==========================================================================" )